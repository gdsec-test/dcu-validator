# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import schedule_service_pb2 as schedule__service__pb2


class SchedulerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddSchedule = channel.unary_unary(
                '/scheduler.Scheduler/AddSchedule',
                request_serializer=schedule__service__pb2.Request.SerializeToString,
                response_deserializer=schedule__service__pb2.Response.FromString,
                )
        self.AddClosureSchedule = channel.unary_unary(
                '/scheduler.Scheduler/AddClosureSchedule',
                request_serializer=schedule__service__pb2.Request.SerializeToString,
                response_deserializer=schedule__service__pb2.Response.FromString,
                )
        self.RemoveSchedule = channel.unary_unary(
                '/scheduler.Scheduler/RemoveSchedule',
                request_serializer=schedule__service__pb2.Request.SerializeToString,
                response_deserializer=schedule__service__pb2.Response.FromString,
                )
        self.ValidateTicket = channel.unary_unary(
                '/scheduler.Scheduler/ValidateTicket',
                request_serializer=schedule__service__pb2.Request.SerializeToString,
                response_deserializer=schedule__service__pb2.ValidationResponse.FromString,
                )
        self.CloseTicket = channel.unary_unary(
                '/scheduler.Scheduler/CloseTicket',
                request_serializer=schedule__service__pb2.Request.SerializeToString,
                response_deserializer=schedule__service__pb2.ValidationResponse.FromString,
                )


class SchedulerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddClosureSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateTicket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseTicket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchedulerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.AddSchedule,
                    request_deserializer=schedule__service__pb2.Request.FromString,
                    response_serializer=schedule__service__pb2.Response.SerializeToString,
            ),
            'AddClosureSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.AddClosureSchedule,
                    request_deserializer=schedule__service__pb2.Request.FromString,
                    response_serializer=schedule__service__pb2.Response.SerializeToString,
            ),
            'RemoveSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveSchedule,
                    request_deserializer=schedule__service__pb2.Request.FromString,
                    response_serializer=schedule__service__pb2.Response.SerializeToString,
            ),
            'ValidateTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateTicket,
                    request_deserializer=schedule__service__pb2.Request.FromString,
                    response_serializer=schedule__service__pb2.ValidationResponse.SerializeToString,
            ),
            'CloseTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseTicket,
                    request_deserializer=schedule__service__pb2.Request.FromString,
                    response_serializer=schedule__service__pb2.ValidationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scheduler.Scheduler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Scheduler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/AddSchedule',
            schedule__service__pb2.Request.SerializeToString,
            schedule__service__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddClosureSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/AddClosureSchedule',
            schedule__service__pb2.Request.SerializeToString,
            schedule__service__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/RemoveSchedule',
            schedule__service__pb2.Request.SerializeToString,
            schedule__service__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/ValidateTicket',
            schedule__service__pb2.Request.SerializeToString,
            schedule__service__pb2.ValidationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/CloseTicket',
            schedule__service__pb2.Request.SerializeToString,
            schedule__service__pb2.ValidationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
